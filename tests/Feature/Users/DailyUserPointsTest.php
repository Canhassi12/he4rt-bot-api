<?php

namespace Tests\Feature\Users;

use App\Models\User\User;
use Carbon\Carbon;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Symfony\Component\HttpFoundation\Response;
use TestCase;

class DailyUserPointsTest extends TestCase
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed');
    }

    public function test_bot_can_give_points()
    {
        $user = User::factory()->create(['money' => 0]);

        $response = $this->post(
            route('users.dailyPoints', ['discordId' => $user->discord_id]),
            [],
            $this->getHeaders()
        );

        $response->seeStatusCode(Response::HTTP_OK)
            ->seeJsonStructure(['points', 'date']);

        $this->notSeeInDatabase('users', [
            'id' => $user->getKey(),
            'money' => 0
        ]);
    }

    public function test_bot_should_not_give_to_user_who_had_points_today()
    {
        $user = User::factory()->create(['daily' => Carbon::now()->addDay()]);

        $response = $this->post(
            route('users.dailyPoints', ['discordId' => $user->discord_id]),
            [],
            $this->getHeaders()
        );

        $response->seeStatusCode(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function test_bot_without_a_key_should_not_grant_points_to_a_user()
    {
        $user = User::factory()->create();
        $response = $this->post(route('users.dailyPoints', ['discordId' => $user->discord_id]));
        $response->seeStatusCode(Response::HTTP_UNAUTHORIZED);
    }
}
